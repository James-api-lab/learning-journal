
---

## ðŸ“˜ Learning Journal â€” Week 4, Day 1

BACK IN PYTHON BABY! It is crazy how much more comfortable I feel with it. 

**Theme:** Flask API Foundations â€” from CLI scripts to running a local microservice.

---

### ðŸŽ¯ Goal
Transition from standalone Python CLI scripts to a **web-accessible Flask API** that returns structured JSON responses and supports modular endpoints.

---

### ðŸ§© What I Built
- **Flask API App (`app.py`)**  
  - Core routes: `/`, `/health`, `/meta`, `/demo`  
  - Structured logging via `RotatingFileHandler`  
  - Environment configuration with `.env`  
  - JSON-only error responses (404 + 500 handlers)  
  - Dynamic metadata (`app.config["VERSION"]`)

- **Testing endpoints:**  
  - Used PowerShellâ€™s `iwr` and `curl.exe` to verify routes.  
  - Confirmed proper 200, 404, and 500 JSON payloads.

---

### ðŸ’¡ Key Concepts Learned
- Flask route decorators and HTTP methods (`@app.route()`)
- Handling configuration cleanly with `.env` + `dotenv`
- Safe error handling â€” returning consistent JSON on crashes
- Rotating logs for persistent, production-like monitoring
- GitHub push protection (and how to safely remove secrets!)
- Managing environment files securely (`.gitignore`, `.env.example`)
- Structuring a project for future FastAPI or microservice conversion

---

### ðŸ§  Reflections
This day felt like crossing a bridge from **scripts** â†’ **services**.  
Seeing the JSON responses in the browser or terminal made the logic tangible. I also hit my first real-world problem â€” GitHub push protection due to committed secrets â€” and learned how to rewrite Git history safely using `git filter-repo`.

---

### âœ… Next Steps (W4D2 Preview)
- Add `/weather` route powered by OpenWeather API (using the key in `.env`)
- Return live JSON with city, temperature, and condition
- Test with multiple city parameters (`?city=Seattle`)
- Log API calls and response times in `/data/access.log`


# Week 4 Day 1, again â€” Flask Foundations Journal

### Date

October 5, 2025

### Theme

Flask Foundations: Building and Serving Your First API

### Summary

Today marked a reset and a fresh start for my API learning journey â€” literally. I had to delete my original Week 4 folder and start over after a messy GitHub setup with push protection issues and environment variable leaks. I committed all of my APIs - fun times. While frustrating, it was also an important learning moment about version control hygiene, environment safety, and patience.

I partially rebuilt my **Week 4 - Flask API** project from scratch, reconnected GitHub cleanly under my **James-api-lab** organization, and successfully pushed my foundational files â€” `app.py`, `config.py`, and `README.md`. This time, I followed a step-by-step, no-rush approach that ensured each step worked before moving on.

### What I Accomplished

* âœ… Created a clean new project folder under `Learning APIs/Week 4 - Flask API`.
* âœ… Initialized a new Git repo and added `.gitignore` and `.env.example` safely.
* âœ… Authenticated via GitHub CLI and pushed the repo to my organization.
* âœ… Copied in and committed key files: `app.py`, `config.py`, `README.md`.
* âœ… Verified Flask runs locally and returns `{"message": "Week 4 Flask API is live"}`.

### Lessons Learned

* Secrets and `.env` files should **never** be tracked in Git. Even one mistake can block pushes.
* Starting clean sometimes saves more time than debugging a broken setup.
* GitHub CLI (`gh`) is much more reliable than manual HTTPS setup once properly authenticated.
* I understand how to structure and protect a Flask project more confidently now.

### Next Steps

Tomorrow, Iâ€™ll move into **Day 2**, learning how to use **path parameters** and **query parameters** in Flask routes. Iâ€™ll make sure the explanations include both what to do *and why* â€” to reinforce conceptual understanding.

### Reflection

Todayâ€™s reset felt like a small failure but turned into one of my best real-world learning experiences yet. Version control, security, and good project hygiene are as much a part of being a developer as writing the code itself. Iâ€™m ending the day with a clean project, clear mind, and a running Flask API.
