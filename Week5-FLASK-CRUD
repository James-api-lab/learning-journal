# üß± Week 5 Learning Journal ‚Äî Flask CRUD + Persistence
*Learning APIs Project*

---

## üóì Overview
This week marks the first **backend milestone**: turning stateless demo APIs into a real, database-backed service using **Flask + SQLite + SQLAlchemy**.  
I learned how data is created, saved, queried, and updated persistently instead of disappearing after each run.

---

## üß© Daily Progress

### **Day 1 ‚Äî Persistence Concepts + Setup**
- Created `week5-flask-crud/` project and virtual env  
- Installed Flask + SQLAlchemy + dotenv + pytest  
- Fixed path errors using absolute paths in `config.py`  
- Verified `/health` returns `{"ok": true}`  
- Learned what *persistence* means and how the ORM maps Python ‚Üî SQL  
**Reflection:**  
> Persistence means my API keeps state ‚Äî data stored on disk, not memory.

---

### **Day 2 ‚Äî Create + Read**
- Built `/records` blueprint  
- Implemented `POST` and `GET` routes with validation  
- Tested via `curl.exe` and `Invoke-RestMethod`  
- Confirmed new rows persist between restarts.  
**Lesson:** Flask routes handle HTTP; SQLAlchemy handles data commits.

---

### **Day 3 ‚Äî Update + Delete**
- Added `PUT /records/<id>` and `DELETE /records/<id>`  
- Learned to retrieve rows, modify attributes, and `commit()`  
- Confirmed deletes persist across restarts.  
**Insight:** Without `commit()`, nothing is saved ‚Äî transactions stay in memory.

---

### **Day 4 ‚Äî Stats + Seeding**
- Added `/records/stats` using `func.avg()` and `group_by()`  
- Created `scripts/seed.py` to preload sample records  
- Learned to run scripts as modules (`python -m scripts.seed`).  
**Lesson:** SQL aggregation is faster than looping in Python.

---

### **Day 5 ‚Äî Logging + Error Handling**
- Implemented `RotatingFileHandler` in `logs/app.log`  
- Added global 404 and 500 handlers returning JSON  
- Understood importance of predictable errors and traceable logs.

---

### **Day 6 ‚Äî Testing**
- Added `pytest` fixture + sample tests for `/health` and `/records`  
- Realized tests act as executable documentation.

---

### **Day 7 ‚Äî Cleanup + Reflection**
- Wrote README.md and finalized structure  
- Confirmed repo pushes cleanly to GitHub  
- Reviewed CRUD verbs and ORM workflow  
- Documented setup steps for repeatability.

---

## üí° Key Concepts
| Concept | Takeaway |
|----------|-----------|
| Persistence | Data lives in SQLite, not memory |
| ORM | Maps classes ‚Üí tables, hides SQL complexity |
| CRUD | Universal API pattern |
| App Factory | Allows tests, seeds, and multi-env setup |
| Blueprints | Modular route organization |
| Commit & Rollback | Control transactional integrity |

---

## üöß Issues Encountered & Fixes
| Issue | Resolution |
|-------|-------------|
| ‚Äúunable to open database file‚Äù | Built absolute path in `config.py` |
| `ModuleNotFoundError: app` | Ran script as module (`python -m scripts.seed`) |
| PowerShell `curl` errors | Used `Invoke-RestMethod` or `curl.exe` |
| Trailing slash redirects | Added `app.url_map.strict_slashes = False` |

---

## ‚úÖ Accomplishments
- Working `/records` CRUD API  
- Seed script and persistent data  
- Basic error logging  
- Initial pytest coverage  
- Full README documentation  

---

## üî≠ Next Week Preview ‚Äî FastAPI Migration
- Replace Flask with **FastAPI** for async performance  
- Introduce **Pydantic** validation  
- Explore **OpenAPI Docs** generation  
- Reuse same database layer through SQLAlchemy models

---

**Author:** James Gilmore  
**Course:** Learning APIs ‚Äî Week 5  
**Instructor Support:** ChatGPT (GPT-5)
