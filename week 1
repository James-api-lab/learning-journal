Week 1 - Day 1 Learning the basics of APIs { "userId": 1, "id": 1, "title": "delectus aut autem", "completed": false }

Week 1 - Day 2

✅ Day 2 Log: I can use Postman to send a GET request and see the JSON response.

built a working Morning Brief generator in Python. Pulls Seattle weather (Open-Meteo API) Fetches top Seattle + world headlines (NewsAPI) Uses OpenAI to generate a short banking/markets summary Formats everything into an HTML email Sends it automatically via SendGrid with an API (delivers to spam right now) This is my first end-to-end workflow: local script → multiple external APIs → AI summary → email delivery.

Week 1 - Day 3 - Learn the Anatomy of an API

URL (endpoint - where I am sending the request today's example is : https://api.chucknorris.io/jokes/random
Method - what i am doing -GET (read), -POST (create), -PUT (update), -DELETE (delete)
Headers - information -Example: X-Api-Key:
Body - the data I send with the request -Example: JSON like { "city": "Seattle" }
I used Postman to set a GET request URL: https://api.chucknorris.io/jokes/random

The response: { "categories": [], "created_at": "2020-01-05 13:42:28.664997", "icon_url": "https://api.chucknorris.io/img/avatar/chuck-norris.png", "id": "99B90SWoSAOZiX2Gl_Kp9w", "updated_at": "2020-01-05 13:42:28.664997", "url": "https://api.chucknorris.io/jokes/99B90SWoSAOZiX2Gl_Kp9w", "value": "Chuck Norris doesn't have to say NO to drugs.....They don't ask" }

Day 3 continue - Expanding the API categories

Turn: https://api.chucknorris.io/jokes/random into: https://api.chucknorris.io/jokes/random?category=dev

{ "categories": [ "dev" ], "created_at": "2020-01-05 13:42:19.324003", "icon_url": "https://api.chucknorris.io/img/avatar/chuck-norris.png", "id": "poqerqlpqz2en3hacikbjw", "updated_at": "2020-01-05 13:42:19.324003", "url": "https://api.chucknorris.io/jokes/poqerqlpqz2en3hacikbjw", "value": "Chuck Norris doesn't use reflection, reflection asks politely for his help." }

I explored the categories with: https://api.chucknorris.io/jokes/categories

Response: [ "animal", "career", "celebrity", "dev", "explicit", "fashion", "food", "history", "money", "movie", "music", "political", "religion", "science", "sport", "travel" ]

There is a difference here that I did not know. The original response is an object ( { .... } )

The category call is an array

✅ Day 3 Practice Log:

I used query parameters (?category=...) to filter jokes.
I saw the difference between JSON objects ({ }) and arrays ([ ]).
I triggered an error (wrong category) and learned how APIs respond with status codes.
📅 Day 4 — Weather API Setup

https://home.openweathermap.org/

Using my API key i called in browser

[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":8.87,"feels_like":7.15,"temp_min":8.87,"temp_max":8.87,"pressure":1025,"humidity":78,"sea_level":1025,"grnd_level":1021},"visibility":10000,"wind":{"speed":3.01,"deg":13,"gust":9.06},"clouds":{"all":94},"dt":1758771375,"sys":{"country":"GB","sunrise":1758779487,"sunset":1758822772},"timezone":3600,"id":2643743,"name":"London","cod":200}

In Postman I updated the call to Seattle

{ "coord": { "lon": -122.3321, "lat": 47.6062 }, "weather": [ { "id": 800, "main": "Clear", "description": "clear sky", "icon": "01n" } ], "base": "stations", "main": { "temp": 16.18, "feels_like": 15.73, "temp_min": 16.18, "temp_max": 16.18, "pressure": 1017, "humidity": 72, "sea_level": 1017, "grnd_level": 1008 }, "visibility": 10000, "wind": { "speed": 2.06, "deg": 11, "gust": 3.9 }, "clouds": { "all": 0 }, "dt": 1758771548, "sys": { "country": "US", "sunrise": 1758722351, "sunset": 1758765794 }, "timezone": -25200, "id": 5809844, "name": "Seattle", "cod": 200 }

📅 Day 4 Expanded — Weather API Deep Dive 🌤️

Updating the call City = Seattle Unites = Imperial

{"coord":{"lon":-122.3321,"lat":47.6062},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":61.12,"feels_like":60.31,"temp_min":61.12,"temp_max":61.12,"pressure":1017,"humidity":72,"sea_level":1017,"grnd_level":1008},"visibility":10000,"wind":{"speed":4.61,"deg":11,"gust":8.72},"clouds":{"all":0},"dt":1758771258,"sys":{"country":"US","sunrise":1758722351,"sunset":1758765794},"timezone":-25200,"id":5809844,"name":"Seattle","cod":200}

In a room filled with errors:

200 OK → success 401 Unauthorized → bad key 404 Not Found → bad city

✅ Day 4 Log: I used my first real API key to pull live weather from OpenWeather.
I also learned how query parameters (q, units, appid) change results.
I tested errors (bad city, bad key).
Backup: I can also fetch forecasts using Open-Meteo with latitude/longitude.

📅 Day 5 — Weather API Variations Goal: Learn how query parameters change API responses.

Changing cities
Chaining Params with &
&lang=es didnt seem to work
Changing the mode=XML This XML file does not appear to have any style information associated with it. The document tree is shown below.
US -25200
Week 1 Super Project

I created morning_brief.py to utilize OpenWeather API, News API and OpenAI API calls create a daily brief to summarize the Seattle weather, top 5 lcoal news stories, top 3 global news and a banking industry summary currated by OpenAI.

I then used task scheduler to send this email via sendgrid at 645a every day. lets see if it works!

### Day 6 — Refactor into Functions (and make it usable)

**What I built**
- Created a working `weather_cli.py` that accepts city names as CLI args.
- Centralized `.env` loading next to the script with `Path(__file__).with_name(".env")` so it runs reliably from any folder.
- Updated `README.md` with exact run commands from root vs inside `week2/`.

**What I learned**
- **Functions → reuse**: wrapping API logic in `get_weather(city)` lets me call it from a CLI, scheduler, or later a web endpoint.
- **Env loading matters**: `load_dotenv()` depends on the *working directory*; pointing to the file explicitly avoids “missing key” bugs.
- **Paths & shells**: PowerShell ≠ Unix. Use `New-Item`/`Set-Content` instead of `mkdir -p`/`printf`. Also, `cd` only moves into folders (not files).
- **Run context**: VS Code’s “Run” uses an absolute path; terminal commands are relative to the current folder—hence `python week2/...` vs `python weather_one_city.py`.
- **Git paths**: `git add` paths are relative to the current directory. Being inside `week2/` means don’t prefix `week2/` again.

**Snags & fixes**
- Error: “Missing OPENWEATHER_API_KEY” → fixed by explicitly loading `week2/.env` with `Path(__file__).with_name(".env")`.
- Error: file not found when running from repo root → ran with the correct relative path (`python week2/weather_one_city.py`) or `cd week2` first.
- SyntaxError from `@'`…`'@` → realized those are PowerShell here-string markers and must not end up in `.py` files.

**Finish Log**
> I refactored the weather call into a reusable function and built a CLI that prints live temps for any city. Env loading and paths are now reliable.

### Day 7 — Weather CLI + Daily Logger

**What I built**
- Finalized a Weather CLI that accepts city args and prompts with no args.
- Added `log_weather_daily.py` that appends one row per city per day into `data/weather_log.csv`, with simple de-dupe.

**What I learned**
- Small, focused functions make CLIs and schedulers trivial to build on.
- Explicit `.env` loading with `Path(__file__).with_name(".env")` removes “where am I running?” issues.
- Appending + de-dupe is enough to create reliable time-series data for charts.

**Finish Log**
> I shipped a working CLI and a daily logger that builds a weather history automatically.

